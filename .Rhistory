dfb <- read_excel("boston1.xls")
head(dfb)
summary(dfb)
clear
x = c(1, 12, 30, 54, 5)
length(x)
typeof(x)
x[1]
x[2]
x = c(x, 8)
x
x = c(x, "cat")
x
typeof(x)
x[1:3]
length(x)
series <- 1:10
series
seq(10)
y = seq(1, 10, by=2)
y
typeof(y)
typeof(as.integer(y))
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m2 = matrix(y, nrow = 3, ncol = 2)
m2 = matrix(1:6, nrow = 3, ncol = 2)
m2
x <- 1:4
y <- 10:13
cbind(x, y)
nrow(cbind(x, y))
ncol(cbind(x, y))
rbind(x, y)
df1 = as.data.frame((cbind(x, y)))
df1
str(df1)
length(df1)
data()
data(package="datasets")
data("ChickWeight")
data(ChickWeight)
str(ChickWeight)
head(ChickWeight)
library(readxl)
boston1 <- read_excel("Desktop/Course_Script_1/section2/boston1.xls")
View(boston1)
data()
library(MASS)
data()
data(airquality)
??airquality
??airquality
str(airquality)
str(airquality)
head(airquality)
summary(airquality)
aq = na.omit(airquality)
aq = na.omit(airquality)
head(aq)
summary(aq)
str(aq)
head(aq2)
aq2 = airquality[complete.cases(airquality), ]
head(aq2)
summary(aq2)
aqty = airquality
aqty[is.na(aqty)] <- 0
head(aqty)
head(aqty)
summary(aqty)
version
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
a <- available.packages()
head(rownames(a), 3)
install.packages("KernSmooth")
library(KernSmooth)
clear
getwd()
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (Y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {}
for(i in 1:55) { }
for(i in 1:55) {
lmFormular = reformulate(names(trainSpam[i], response = "numType"))
glmFit = glm(lmFormular, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
for(i in 1:55) {
lmFormular = reformulate(names(trainSpam)[i], response = "numType"))
lmFormular = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormular, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
head(trainSpam)
set.seed(1)
dir()
setwd("Desktop/datasciencecoursera")
activity <- read.table("activity.csv", header = F)
activity <- read.table("activity.csv", header = F, sep = ",", na.strings = "NA")
head(activity)
str(activity)
activity <- read.table("activity.csv", header = F, sep = ",", na.strings = "NA", stringsAsFactors = F)
head(activity)
str(activity)
activity <- read.table("activity.csv", header = T, sep = ",", na.strings = "NA", stringsAsFactors = F)
str(activity)
activity <- read.table("activity.csv", header = T, sep = ",", na.strings = "NA", stringsAsFactors = F, colClasses = c("numaric", "character", "numeric"))
activity <- read.table("activity.csv", header = T, sep = ",", na.strings = "NA", stringsAsFactors = F, colClasses = c("numeric", "character", "numeric"))
str(activity)
activity <- read.table("activity.csv", header = T, sep = ",", na.strings = "NA", stringsAsFactors = F)
str(activity)
?as.Date
activity$date <- as.Date(activity$date)
str(activity)
dim(activity)
summary(activity)
setwd("../RepData_PeerAssessment1")
dir()
activity <- read.table("activity.csv", header = T, sep = ",", na.strings = "NA", stringsAsFactors = F)
head(activity)
library(dplyr)
?group_by
by_date <- activity %>% group_by(date)
head(by_date)
?summarise
total.steps.per.date <- activity %>% group_by(date) %>% summarise(total.steps = sum(steps))
head(total.steps.per.date)
total.steps.per.date <- activity %>% group_by(date) %>% summarise(total.steps = sum(steps, na.rm = T))
head(total.steps.per.date)
ggplot2::ggplot(total.steps.per.date, aes(x = date)) + geom_histogram()
ggplot2::ggplot(total.steps.per.date, ggplot2::aes(x = date)) + geom_histogram()
ggplot2::ggplot(total.steps.per.date, ggplot2::aes(x = date)) + ggplot2::geom_histogram()
library(ggplot2)
?geom_histogram
?aes
ggplot2::ggplot(total.steps.per.date, ggplot2::aes(x = date, y = total.steps)) + ggplot2::geom_histogram()
?geom_histogram
head(total.steps.per.date)
total.steps.per.date <- activity %>% dplyr::group_by(date) %>% dplyr::summarise(total.steps = sum(steps, na.rm = T))
ggplot2::ggplot(total.steps.per.date, ggplot2::aes(x = date, y = total.steps)) + ggplot2::geom_histogram()
qplot(activity$date, geom = "histogram")
qplot(activity$steps, geom = "histogram")
qplot(as.factor(activity$date), geom = "histogram")
ggplot2::ggplot(activity, ggplot2::aes(date)) + ggplot2::geom_histogram(aes(fill = ...count...))
ggplot2::ggplot(activity, ggplot2::aes(x = date)) + ggplot2::geom_histogram(aes(fill = ...count...))
ggplot2::ggplot(activity, ggplot2::aes(activity$date)) + ggplot2::geom_histogram(aes(fill = ...count...))
qplot(activity$date, geom="histogram")
View(total.steps.per.date)
ggplot(data = activity, aes(activity$date)) + geom_histogram()
ggplot(data = activity, aes(activity$date)) + geom_histogram(stat = "count")
?geom_histogram
ggplot(data = activity, aes(activity$date)) + geom_histogram(stat = "count", na.rm = T)
?geom_histogram
ggplot(data = activity, aes(activity$date)) + geom_histogram(stat = "count", na.rm = T)
ggplot(data = total.steps.per.date, aes(date ~ total.steps)) + geom_histogram()
ggplot(data = total.steps.per.date, aes(total.steps ~ date)) + geom_histogram()
ggplot(data = total.steps.per.date, aes(total.steps, date)) + geom_histogram()
ggplot(data = total.steps.per.date, aes(date, total.steps)) + geom_histogram()
?geom_histogram
m <- ggplot(movies, aes(rating))
chol <- read.table(url("http://assets.datacamp.com/blog_assets/chol.txt"), header = TRUE)
head(chol)
summary(chol)
str(choi)
str(chol)
qplot(chol$AGE, geom="histogram")
qplot(activity$date, geom="histogram")
qplot(as.factor(activity$date), geom="histogram")
?aes
?stat_summary
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T)
head(total.steps.per.date)
View(total.steps.per.date)
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar")
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar") + scale_x_date(labels = date_format("%Y-%m-%d"), breaks = "1 day")
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar") + scale_x_date(labels = scales::date_format("%Y-%m-%d"), breaks = "1 day")
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar")
?stat_summary
ggplot(data = activity, aes(date, steps)) + geom_histogram(aes(...sum...))
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar")
?stat_summary
?geom_histogram
?geom_bar
?stat_summary
?date_format
?scale_x_date
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar") + scale_x_date(
labels = date_format("%Y-%m-%d"),
breaks = "1 day") # custom x-axis labels
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar") + scale_x_date(
labels = scales::date_format("%Y-%m-%d"),
breaks = "1 day") # custom x-axis labels
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar") + scale_x_date(
breaks = "1 day") # custom x-axis labels
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar") + scale_x_date(
labels = date,
breaks = "1 day") # custom x-axis labels
str(activity)
activity$date <- as.Date(activity$date)
ggplot(data = activity, aes(date, steps)) + stat_summary(fun.y = sum, na.rm = T, geom = "bar") + scale_x_date(
labels = scales::date_format("%Y-%m-%d"),
breaks = "1 day") # custom x-axis labels
View(activity)
?aes
total.steps.per.date <- activity %>% group_by(date) %>% summarise(total.steps = sum(steps))
activity <- read.table("activity.csv", header = T, sep = ",",
na.strings = "NA", stringsAsFactors = F)
activity$date <- as.Date(activity$date)
str(activity)
total.steps.per.date <- activity %>% group_by(date) %>% summarise(total.steps = sum(steps))
View(total.steps.per.date)
total.steps.per.date <- activity %>% group_by(date) %>% summarise(total.steps = sum(steps, na.rm = T))
View(total.steps.per.date)
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps))
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps), binwidth = 50)
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps), binwidth = 1000)
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps), binwidth = 30)
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps))
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps), bins = 30)
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps), bins = 50)
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps), bins = 1000)
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps), bins = 1)
ggplot(data = total.steps.per.date, aes(date)) + geom_histogram(aes(weight = total.steps), bins = 30)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram()
geom_histogram()
?geom_histogram
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram()
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram(binwidth = 0.05)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram()
geom_histogram
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram(binwidth = 30)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram(binwidth = 0.1)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram(binwidth = 0.5)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram(binwidth = 0.9)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram()
ggplot(data = total.steps.per.date, aes(x = date, fill = total.steps)) + geom_histogram()
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram()
max(total.steps.per.date$total.steps)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram(alpha = 0.5)
ggplot(data = activity,
aes(date, steps)) +
stat_summary(fun.y = sum, # adds up all observations for the month
geom = "bar")
ggplot(data = activity,
aes(date, steps)) +
stat_summary(fun.y = sum, # adds up all observations for the month
geom = "bar", na.rm = T)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram()
ggplot(data = activity,
aes(date, steps)) +
stat_summary(fun.y = sum, # adds up all observations for the month
geom = "bar", na.rm = T)
ggplot(data = total.steps.per.date, aes(x = date, weight = total.steps)) + geom_histogram()
ggplot(data = activity,
aes(date, steps)) +
stat_summary(fun.y = sum, # adds up all observations for the month
geom = "bar", na.rm = T)
ggplot(data = activity,
aes(date, steps)) +
stat_summary(fun.y = sum, # adds up all observations for the month
geom = "bar", na.rm = T) + scale_x_date(
labels = date_format("%Y-%m-%d"),
breaks = "1 month") # custom x-axis labels
ggplot(data = activity,
aes(date, steps)) +
stat_summary(fun.y = sum, # adds up all observations for the month
geom = "bar", na.rm = T) + scale_x_date(
labels = scales::date_format("%Y-%m-%d"),
breaks = "1 month") # custom x-axis labels
ggplot(data = activity,
aes(date, steps)) +
stat_summary(fun.y = sum, # adds up all observations for the month
geom = "bar", na.rm = T) + scale_x_date(
labels = scales::date_format("%Y-%m-%d"),
breaks = "1 day") # custom x-axis labels
ggplot(data = activity,
aes(date, steps)) +
stat_summary(fun.y = sum, # adds up all observations for the month
geom = "bar", na.rm = T)
?ylab
?title
?ylab
?round
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
mean(per.day$total.steps)
median(per.day$total.steps)
dim(activity[!is.na(activity$steps)])
activity[!is.na(activity$steps)]
activity[!is.na(activity$steps), ]
head(activity[!is.na(activity$steps), ])
dim(activity[!is.na(activity$steps), ])
dim(activity)
str(activity)
table(activity$date)
dim(table(activity$date))
2355/5
471/24
test <- activity[!is.na(activity$steps), ]
p <- ggplot(test, aes(x = interval, y = steps)) + geom_line()
p
View(test)
max(test$steps)
max(activity$steps)
max(activity$steps, na.rm = T)
which.max(activity$steps, na.rm = T)
?which.max
which(activity$steps == max(activity$steps, na.rm = TRUE))
summarise(activity)
summarize(activity)
head(activity)
summarize(activity)
str(activity)
summary(activity$steps)
summary(activity)
aaa <- summary(activity$steps)
aaa[end]
aaa[end()]
aaa[-1]
aaa[7]
aaa[[NA's']]
aaa$`NA's`
unlist(aaa)
list(aaa)
class(aaa)
aaa[7]
aaa[[7]]
mean(activity$steps)
mean(activity$steps, na.rm = T)
std(activity$steps, na.rm = T)
sd(activity$steps, na.rm = T)
?runif
test <- runif(activity$steps[is.na(activity$steps)], min = 0, max = mean(activity$steps, na.rm = T) + sd(activity$steps, na.rm = T))
test
filled.activity <- activity
n <- activity$steps[is.na(activity$steps)]
mean.steps <- mean(activity$steps, na.rm = T)
sd.steps <- sd(activity$steps, na.rm = T)
values <- round(runif(n, min = 0, max = round(mean.steps + sd.steps)))
filled.activity$steps[is.na(filled.activity$steps)] = values
head(filled.activity)
activity <- read.table("activity.csv", header = TRUE, sep = ",",
na.strings = "NA", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
str(activity)
g <- ggplot2::ggplot(data = activity, ggplot2::aes(date, steps))
g <- g + ggplot2::stat_summary(fun.y = sum, geom = "bar", na.rm = TRUE)
g <- g + ggplot2::xlab("Date") + ggplot2::ylab("Total Steps")
g + ggplot2::ggtitle("Total number of steps taken each day")
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
mean.steps <- round(mean(per.day$total.steps))
median.steps <- median(per.day$total.steps)
g <- ggplot2::ggplot(activity, ggplot2::aes(x = interval, y = steps))
g + ggplot2::geom_line()
ind <- which(activity$steps == max(activity$steps, na.rm = TRUE))
itv <- activity$interval[ind]
na.total <- summary(activity$steps)[[7]]
activity <- read.table("activity.csv", header = TRUE, sep = ",",
na.strings = "NA", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
str(activity)
g <- ggplot2::ggplot(data = activity, ggplot2::aes(date, steps))
g <- g + ggplot2::stat_summary(fun.y = sum, geom = "bar", na.rm = TRUE)
g <- g + ggplot2::xlab("Date") + ggplot2::ylab("Total Steps")
g + ggplot2::ggtitle("Total number of steps taken each day")
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
mean.steps <- round(mean(per.day$total.steps))
median.steps <- median(per.day$total.steps)
g <- ggplot2::ggplot(activity, ggplot2::aes(x = interval, y = steps))
g + ggplot2::geom_line()
ind <- which(activity$steps == max(activity$steps, na.rm = TRUE))
itv <- activity$interval[ind]
na.total <- summary(activity$steps)[[7]]
filled.activity <- activity
n <- activity$steps[is.na(activity$steps)]
mean.steps <- mean(activity$steps, na.rm = T)
sd.steps <- sd(activity$steps, na.rm = T)
values <- round(runif(n, min = 0, max = round(mean.steps + sd.steps)))
filled.activity$steps[is.na(filled.activity$steps)] = values
head(filled.activity)
g <- ggplot2::ggplot(data = filled.activity, ggplot2::aes(date, steps))
g <- g + ggplot2::stat_summary(fun.y = sum, geom = "bar")
g <- g + ggplot2::xlab("Date") + ggplot2::ylab("Total Steps")
g + ggplot2::ggtitle("Total number of steps taken each day in Updated Data Set")
new.per.day <- dplyr::summarise(dplyr::group_by(filled.activity, date),
total.steps = sum(steps, na.rm = T))
new.mean.steps <- round(mean(new.per.day$total.steps))
new.median.steps <- median(new.per.day$total.steps)
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
mean.steps <- round(mean(per.day$total.steps))
median.steps <- median(per.day$total.steps)
activity <- read.table("activity.csv", header = TRUE, sep = ",",
na.strings = "NA", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
str(activity)
g <- ggplot2::ggplot(data = activity, ggplot2::aes(date, steps))
g <- g + ggplot2::stat_summary(fun.y = sum, geom = "bar", na.rm = TRUE)
g <- g + ggplot2::xlab("Date") + ggplot2::ylab("Total Steps")
g + ggplot2::ggtitle("Total number of steps taken each day")
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
mean.steps <- round(mean(per.day$total.steps))
median.steps <- median(per.day$total.steps)
g <- ggplot2::ggplot(activity, ggplot2::aes(x = interval, y = steps))
g + ggplot2::geom_line()
ind <- which(activity$steps == max(activity$steps, na.rm = TRUE))
itv <- activity$interval[ind]
na.total <- summary(activity$steps)[[7]]
filled.activity <- activity
n <- activity$steps[is.na(activity$steps)]
mean.steps <- mean(activity$steps, na.rm = T)
sd.steps <- sd(activity$steps, na.rm = T)
values <- round(runif(n, min = 0, max = round(mean.steps + sd.steps)))
filled.activity$steps[is.na(filled.activity$steps)] = values
head(filled.activity)
g <- ggplot2::ggplot(data = filled.activity, ggplot2::aes(date, steps))
g <- g + ggplot2::stat_summary(fun.y = sum, geom = "bar")
g <- g + ggplot2::xlab("Date") + ggplot2::ylab("Total Steps")
g + ggplot2::ggtitle("Total number of steps taken each day in Updated Data Set")
activity <- read.table("activity.csv", header = TRUE, sep = ",",
na.strings = "NA", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
str(activity)
g <- ggplot2::ggplot(data = activity, ggplot2::aes(date, steps))
g <- g + ggplot2::stat_summary(fun.y = sum, geom = "bar", na.rm = TRUE)
g <- g + ggplot2::xlab("Date") + ggplot2::ylab("Total Steps")
g + ggplot2::ggtitle("Total number of steps taken each day")
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
mean.steps <- round(mean(per.day$total.steps))
median.steps <- median(per.day$total.steps)
g <- ggplot2::ggplot(activity, ggplot2::aes(x = interval, y = steps))
g + ggplot2::geom_line()
ind <- which(activity$steps == max(activity$steps, na.rm = TRUE))
itv <- activity$interval[ind]
na.total <- summary(activity$steps)[[7]]
filled.activity <- activity
n <- activity$steps[is.na(activity$steps)]
mean.steps <- mean(activity$steps, na.rm = T)
sd.steps <- sd(activity$steps, na.rm = T)
values <- round(runif(n, min = 0, max = round(mean.steps + sd.steps)))
filled.activity$steps[is.na(filled.activity$steps)] = values
head(filled.activity)
g <- ggplot2::ggplot(data = filled.activity, ggplot2::aes(date, steps))
g <- g + ggplot2::stat_summary(fun.y = sum, geom = "bar")
g <- g + ggplot2::xlab("Date") + ggplot2::ylab("Total Steps")
g + ggplot2::ggtitle("Total number of steps taken each day in Updated Data Set")
new.per.day <- dplyr::summarise(dplyr::group_by(filled.activity, date),
total.steps = sum(steps, na.rm = T))
new.mean.steps <- round(mean(new.per.day$total.steps))
new.median.steps <- median(new.per.day$total.steps)
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
head(per.day)
mean.steps <- round(mean(per.day$total.steps))
median.steps <- median(per.day$total.steps)
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
head(per.day)
mean(per.day$total.steps)
round(mean(per.day$total.steps))
mean.steps <- round(mean(per.day$total.steps))
median.steps <- median(per.day$total.steps)
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
head(per.day)
mean.steps <- round(mean(per.day$total.steps))
median(per.day$total.steps)
median.steps <- median(per.day$total.steps)
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
mean.steps <- round(mean(per.day$total.steps))
median(per.day$total.steps)
median.steps <- median(per.day$total.steps)
per.day <- dplyr::summarise(dplyr::group_by(activity, date),
total.steps = sum(steps, na.rm = T))
mean.steps <- round(mean(per.day$total.steps))
class(median(per.day$total.steps))
median.steps <- median(per.day$total.steps)
new.per.day <- dplyr::summarise(dplyr::group_by(filled.activity, date),
total.steps = sum(steps))
new.mean.steps <- round(mean(new.per.day$total.steps))
new.median.steps <- median(new.per.day$total.steps)
new.mean.steps
new.median.steps
